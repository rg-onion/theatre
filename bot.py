#!/usr/bin/env python
# -*- coding: utf-8 -*-
import asyncio
import logging
import random

import config
import photos as p
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import text
from modules.database import SQLighter
from state import From
from keyboards import inline_keyboard as kb
from text import text_message as t
from modules import send_group_applications
from config import TOKEN

# —Ç—Ä–æ–ª–ª–∏–Ω–≥
from aiogram.dispatcher.middlewares import BaseMiddleware
from cachetools import TTLCache
from aiogram.dispatcher.handler import CancelHandler

logging.basicConfig(format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.DEBUG)

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
cache = TTLCache(maxsize=float('inf'), ttl=0.5)


class ThrottleMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        if not cache.get(message.chat.id):
            cache[message.chat.id] = True
            return
        else:
            raise CancelHandler


dp.middleware.setup(ThrottleMiddleware())

# database____________________
# Connect to the database or create it if it doesn't exist
bd = SQLighter('/home/aid/PycharmProjects/marion_theatre/bd/reservation.db')


# ____________________________
def check_admin(user_id):
    admin_ids = config.ADMIN_ID  # –∞–¥–º–∏–Ω

    return user_id in admin_ids


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    is_admin = check_admin(user_id)  # –§—É–Ω–∫—Ü–∏—è check_admin –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    if is_admin:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º", "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º").add("user menu")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–≤–æ–¥–∏–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        await message.answer(t.text_start, reply_markup=kb.start_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ user_id
async def send_message_to_user(user_id, message):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        yes_button = types.InlineKeyboardButton("–î–∞", callback_data="yes")
        no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
        keyboard.add(yes_button, no_button)
        message = await bot.send_message(user_id, message, reply_markup=keyboard)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {str(e)}")


@dp.callback_query_handler(lambda query: query.data in ['yes', 'no'])
async def handle_keyboard_callback(query: types.CallbackQuery):
    user_id = query.from_user.id
    answer = query.data
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(config.ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª {answer}")

    # –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)

    await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")


@dp.message_handler(Text(equals="–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"))
async def broadcast_all_users(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = bd.get_user_id()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for row in data:
        locality = row[0]
        user_id = row[1]
        weight = row[2]

        if weight > 0:
            message = f"–í—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ {weight} –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {locality}. " \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!"
            sent_message = await send_message_to_user(user_id, message)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(data) > 10 and data.index(row) % 10 == 9:
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@dp.message_handler(Text(equals="user menu"))
async def broadcast_all_users(message: types.Message):
    await message.answer_photo(p.poster_pic, t.text_start, reply_markup=kb.start_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º
async def send_message_all(user_id, message):
    try:
        await bot.send_message(user_id, message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {str(e)}")


@dp.message_handler(Text(equals="–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"))
async def send_message_to_all_users(message: types.Message):
    await message.answer(t.admin_message0)
    await From.ADMIN_MESSAGE.set()
    await message.delete()


@dp.message_handler(state=From.ADMIN_MESSAGE)
async def buy_product_set(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['ADMIN_MESSAGE'] = message.text.replace('\n', ' ')
    await state.finish()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    admin_message = text(f"{user_data['ADMIN_MESSAGE']}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = bd.get_all_users()

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
    message_limit = 2

    for row in all_users:
        user_id = row[0]
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_message_all(user_id, admin_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {str(e)}")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        await asyncio.sleep(1 / message_limit)

    await message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@dp.callback_query_handler(lambda c: c.data == 'information_theatre0')
async def info_theatre(call: types.CallbackQuery):
    await call.answer(cache_time=1)
    num_photos = 3
    selected_photos = random.sample(p.all_photos, num_photos)
    photos = [
        types.InputMediaPhoto(media=photo['media'], caption=photo['caption'])
        for photo in selected_photos
    ]
    await bot.send_media_group(call.message.chat.id, media=photos)
    await asyncio.sleep(0.5)
    await call.message.answer(t.information_theatre_text, reply_markup=kb.back)


# next perfomance
@dp.callback_query_handler(lambda c: c.data == 'next_performance0')
async def next_perfomance(call: types.CallbackQuery):
    await call.answer(cache_time=1)
    await call.message.edit_text(t.next_performance_text, reply_markup=kb.back)


@dp.callback_query_handler(lambda c: c.data == 'back0')
async def back(call: types.CallbackQuery):
    await call.answer(cache_time=1)
    await call.message.edit_text(t.text_start, reply_markup=kb.start_keyboard)


# –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
@dp.callback_query_handler(lambda c: c.data == 'reservation_buy0')
async def buy_product_set(call: types.CallbackQuery):
    await call.message.answer(t.text_set0)
    await From.TIKET_APPLICATION.set()
    await call.message.delete()


# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    cancel_text = text(
        "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á üòâ"
    )
    markup = types.ReplyKeyboardRemove()
    await message.answer(cancel_text, reply_markup=markup)
    await asyncio.sleep(2)
    await message.answer_photo(p.poster_pic, t.text_start, reply_markup=kb.start_keyboard)


@dp.message_handler(state=From.TIKET_APPLICATION)
async def translation(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['TIKET_APPLICATION'] = message.text
    await From.next()
    await message.answer(t.text_set1)


# –ª–æ–≤–∏–º –æ—Ç–≤–µ—Ç
def is_valid_number(number):
    return number.isdigit() and len(number) <= 9


@dp.message_handler(lambda message: not is_valid_number(message.text), state=From.PHONE_NUMBER)
async def only_numbers_invalid(message: types.Message):
    await message.answer("<b>–£–ø—Å, –≤—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...</b>\n\n"
                         "<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ü–∏—Ñ—Ä–∞—Ö –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel</i>")


@dp.message_handler(state=From.PHONE_NUMBER)
async def buy_product_set(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['PHONE_NUMBER'] = message.text.replace('\n', ' ')
    await From.next()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row("üìçWroc≈Çaw").add("–û—Ç–º–µ–Ω–∞")
    await message.answer(t.text_set2, reply_markup=markup)


@dp.message_handler(lambda message: message.text not in ["üìçWroc≈Çaw"], state=From.LOCALITY)
async def translation_invalid(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@dp.message_handler(state=From.LOCALITY)
async def buy_product_set(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['LOCALITY'] = message.text.replace('\n', ' ')
    await From.next()
    markup = types.ReplyKeyboardRemove(selective=True)
    await message.answer(t.text_set3, reply_markup=markup)


@dp.message_handler(lambda message: not message.text.isdigit(), state=From.NUMBER_OF_TICKETS)
async def only_numbers_invalid(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏ <i>–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel</i>")


@dp.message_handler(state=From.NUMBER_OF_TICKETS)
async def translation(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['NUMBER_OF_TICKETS'] = message.text
    await From.next()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–î–∞", "–û—Ç–º–µ–Ω–∞")
    await message.answer(f"–í—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ <b>{user_data['NUMBER_OF_TICKETS']}</b> üéü\n"
                         f"–ù–∞ –∏–º—è <b>{user_data['TIKET_APPLICATION']}</b>\n"
                         f"–í –≥–æ—Ä–æ–¥–µ {user_data['LOCALITY']}\n"
                         f"–∏ —É–∫–∞–∑–∞–ª–∏ —ç—Ç–æ—Ç <b>+48{user_data['PHONE_NUMBER']}</b> –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n\n"
                         f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=markup)


@dp.message_handler(lambda message: message.text not in ["–î–∞", "–û—Ç–º–µ–Ω–∞"], state=From.SEND_YES)
async def translation_invalid(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@dp.message_handler(state=From.SEND_YES)
async def translation(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['SEND_YES'] = message.text
    buy_product = user_data['TIKET_APPLICATION']
    phone_number = user_data['PHONE_NUMBER']
    user_locality = user_data['LOCALITY']
    weight_data = user_data['NUMBER_OF_TICKETS']
    userinfo_id = message.from_user.id
    userinfo_first_name = message.from_user.first_name
    userinfo_last_name = message.from_user.last_name
    userinfo_username = message.from_user.username
    userinfo_language = message.from_user.language_code
    bd.user_add_reservation(buy_product, user_locality, weight_data, userinfo_id)
    await asyncio.sleep(1)
    send_user_message = text(
        "\n     <b>–°–ø–∞—Å–∏–±–æ. \n–ú—ã –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º —Å–ø–µ–∫—Ç–∞–∫–ª–µ!</b>" + "üëç",
        "\n\n<i>–í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.</i>")
    markup = types.ReplyKeyboardRemove(selective=True)
    await message.answer(send_user_message, reply_markup=markup)
    locality_data = bd.get_reservation()
    sale_view_text = "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ:\n"
    for locality in locality_data:
        sale_view_text += f"–í {locality[0]} üéü {locality[1]} \n"
    await send_group_applications.send(f"–Ω–∏–∫ –≤ telegram @{userinfo_username}"
                                       f"\n\n–ë–∏–ª–µ—Ç—ã –Ω–∞ –∏–º—è:"
                                       f"\n     üü¢   {buy_product}"
                                       f"\n     üìû   +48{phone_number}"
                                       f"\n\nLocal: '{user_locality}'"
                                       f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ üéü: '{weight_data}'"
                                       f"\n\n_______________________________\n"
                                       f"{sale_view_text}"
                                       f"\n_______________________________"
                                       f"\n‚ÑπÔ∏è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ‚ÑπÔ∏è"
                                       f"\n\nuser_idüü¢   {userinfo_id}"
                                       f"\nüë§    {userinfo_first_name} {userinfo_last_name}"
                                       f"\n–Ø–∑—ã–∫ –º–µ—Å—Å–µ–¥–∂–µ—Ä–∞üîò '{userinfo_language}'"
                                       f"\n_______________________________")
    await asyncio.sleep(3)
    await message.answer_photo(p.poster_pic, t.text_start, reply_markup=kb.start_keyboard)
    await state.finish()


@dp.message_handler(commands=['help'])
async def help_message(message: types.Message):
    await message.answer('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –º—ã –ø–æ—Å—Ç–æ—Ä–∞–µ–º—Å—è –µ—ë —Ä–µ—à–∏—Ç—å.')
    await From.HELP.set()
    await message.delete()


@dp.message_handler(state=From.HELP)
async def translation(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['HELP'] = message.text
    await state.finish()
    userinfo_first_name = message.from_user
    await message.answer(f"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é /help\n\n"
                         f"<< {user_data['HELP']} >>\n\n"
                         f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                         f"{userinfo_first_name}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
